
// longest subarray with given sum

#include <bits/stdc++.h>
using namespace std;

int getLongestSubarray(vector<int>& a, long long k) {
    // TC : O(n^3)
    // SC : O(1)
    int n = a.size(); 
    int len = 0;
    for (int i = 0; i < n; i++) { 
        for (int j = i; j < n; j++) { 
            long long s = 0;
            for (int K = i; K <= j; K++) s += a[K];
            if (s == k) len = max(len, j - i + 1);
        }
    }
    return len;

    // TC : O(n^2)
    // SC : O(n)
    int n = a.size(); 
    int len = 0;
    for (int i = 0; i < n; i++) { 
        int s = 0;
        for (int j = i; j < n; j++) { 
            s += a[j];
            if (s == k) len = max(len, j - i + 1);
        }
    }
    return len;
    
    // TC : O(nlogn)
    // SC : O(n)
    int n = a.size(); 
    map<long long, int> preSumMap;
    long long sum = 0;
    int maxLen = 0;
    for (int i = 0; i < n; i++) {
        sum += a[i];
        if (sum == k) maxLen = max(maxLen, i + 1);
        long long rem = sum - k;
        if (preSumMap.find(rem) != preSumMap.end()) {
            int len = i - preSumMap[rem];
            maxLen = max(maxLen, len);
        }
        if (preSumMap.find(sum) == preSumMap.end()) preSumMap[sum] = i;
    }
    return maxLen;
    
    // TC : O(n)
    // SC : O(1)
    int n = a.size(); 
    int left = 0, right = 0;
    long long sum = a[0];
    int maxLen = 0;
    while (right < n) {
        while (left <= right && sum > k) {
            sum -= a[left];
            left++;
        }
        if (sum == k) maxLen = max(maxLen, right - left + 1);
        right++;
        if (right < n) sum += a[right];
    }
    return maxLen;
}



