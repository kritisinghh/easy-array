// union
#include <bits/stdc++.h>

using namespace std;

vector < int > FindUnion(int arr1[], int arr2[], int n, int m) {
    // TC : O((n + m) * log N)
    // SC : O(N)
    map < int, int > freq;
    vector < int > Union;
    for (int i = 0; i < n; i++) freq[arr1[i]]++;
    for (int i = 0; i < m; i++) freq[arr2[i]]++;
    for (auto & it: freq) Union.push_back(it.first);
    return Union;
    
    // TC : O((n + m) * log N)
    // SC : O(N)
    set < int > s;
    vector < int > Union;
    for (int i = 0; i < n; i++) s.insert(arr1[i]);
    for (int i = 0; i < m; i++) s.insert(arr2[i]);
    for (auto & it: s) Union.push_back(it);
    return Union;
    
    
    // TC : O(n + m)
    // SC : O(N)
    int i = 0, j = 0;
    vector<int> Union;
    
    while (i < n && j < m) {
        if (arr1[i] <= arr2[j]) {
            if (Union.empty() || Union.back() != arr1[i])
                Union.push_back(arr1[i]);
            i++;
        } else {
            if (Union.empty() || Union.back() != arr2[j])
                Union.push_back(arr2[j]);
            j++;
        }
    }
    while (i < n) {
        if (Union.empty() || Union.back() != arr1[i])
            Union.push_back(arr1[i]);
        i++;
    }
    while (j < m) {
        if (Union.empty() || Union.back() != arr2[j])
            Union.push_back(arr2[j]);
        j++;
    }
    return Union;
}



